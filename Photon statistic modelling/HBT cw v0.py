##############################################################################
# Import some libraries
##############################################################################
import sys
import numpy as np
import matplotlib.pyplot as plt

##############################################################################
# Import some extra special libraries from my own repo and do some other stuff
##############################################################################
# Office PC (eea) path
sys.path.insert(0, r"D:\Python\Local Repo\library")

# Surface Pro path
sys.path.insert(0, r"C:\Users\Philip\Documents\GitHub\latest-python\library")

np.set_printoptions(suppress=True)

import prd_plots
import prd_data_proc
cs = prd_plots.palette()

##############################################################################
# Do some stuff
##############################################################################
# load photon timing files generated by 'Generate photons.py'
T = 100
τ_decay = 10
τ_excite = 1
drive = 'cw '

# Office PC (eea) path
p0 = r'D:\Experimental Data\Python simulations (G5 A5)'\
    r'\Single photon statistics\Data\20190320\\'\
    + drive + str(τ_decay) + 'ns, ' + \
    str(τ_excite) + 'x exc, ' + \
    'T ' + str(round(T, 2)) + '%'
# # Surface Pro path
# p0 = r'C:\Users\Philip\Documents\Data\\' + drive + str(τ_decay) + 'ns, ' + \
#     str(τ_excite) + 'x exc, ' + \
#     'T ' + str(round(T, 2)) + '%'

f4 = p0 + ' - HBT.txt'
f5 = p0 + ' - fom.txt'

τs_HBT = np.loadtxt(f4)
with open(f5, 'r', encoding='utf-8') as f:
    a = f.read()
    b = a.split('\n')
    for i0, j0 in enumerate(b):
        if 'exp clk =' in j0:
            t_clk = float(j0.split(' = ')[-1])
        if 'τ_excite =' in j0:
            τ_excite = float(j0.split(' = ')[-1])
        if 'τ_decay =' in j0:
            τ = float(j0.split(' = ')[-1])
        if 'Δt =' in j0:
            Δt = float(j0.split(' = ')[-1])
        if '# photons sent =' in j0:
            γs = float(j0.split(' = ')[-1])
        if '# photons det 1 =' in j0:
            γs_det1 = float(j0.split(' = ')[-1])
        if '# photons det 2 =' in j0:
            γs_det2 = float(j0.split(' = ')[-1])

print('experiment time = ', np.round(1e-6 * t_clk, 2), 'ms')
print('emission rate = ', np.round(1e3 * (γs / t_clk), 2), 'Mcps')
print('detection rate = ',
      np.round(1e3 * ((γs_det1 + γs_det2) / t_clk), 2), 'Mcps')
print('Emission:detection:HBT', γs / γs, ':',
      (γs_det1 + γs_det2) / γs, ':',
      len(τs_HBT) / γs)

# Prepare histogram to be plotted
x1 = τs_HBT

# x1 = [i for i in x1 if i <= 1000]
# x1 = [i for i in x1 if i >= -1000]

bin_N = 501
h1, bins = np.histogram(x1, bins=bin_N, density=False)
bin_centres = np.linspace(bins[0] + (bins[1] - bins[0]) / 2,
                          bins[-2] + (bins[-1] - bins[-2]) / 2, len(bins) - 1)
hist_time = np.linspace(bins[0] + (bins[1] - bins[0]) / 2,
                        bins[-2] + (bins[-1] - bins[-2]) / 2, 1000)
bin_width = bins[1] - bins[0]

# Normailise τs_HBT to g2 values
det_1 = γs_det1 / t_clk
det_2 = γs_det2 / t_clk
g2s = h1 / (det_1 * det_2 * bin_width * t_clk)
y2 = g2s

t_excite = 10
x3 = np.linspace(0, bins[-1], 1000)
y3 = np.exp(-(0.5 * (x3) / τ_decay) * (T / 100))

#######################################################################
# Plot some figures
#######################################################################
prd_plots.ggplot()

# histograms
plot_size = 4

fig2 = plt.figure('fig2', figsize=(plot_size * np.sqrt(2), plot_size))
ax2 = fig2.add_subplot(1, 1, 1)
fig2.patch.set_facecolor(cs['mnk_dgrey'])
ax2.set_xlabel('τ (ns)')
ax2.set_ylabel('#')
# ax2.set_yscale('log')
plt.hist(x1, bins=bin_N, alpha=0.5,
         facecolor=cs['ggred'], edgecolor=cs['ggred'],
         label='Probabilistic', density=False)
plt.plot(bin_centres, h1, '.', color=cs['ggblue'])
plt.savefig('hist.svg')
plt.title('count rate = ' + str(np.round(
    1e3 * ((γs_det2 + γs_det1) / t_clk), 2)) + ' Mcps')
plt.tight_layout()

fig1 = plt.figure('fig1', figsize=(plot_size * np.sqrt(2), plot_size))
ax1 = fig1.add_subplot(1, 1, 1)
fig1.patch.set_facecolor(cs['mnk_dgrey'])
ax1.set_xlabel('τ (ns)')
ax1.set_ylabel('g$^2$(τ)')
# ax1.set_yscale('log')
plt.plot(bin_centres, y2, '.', color=cs['ggblue'])
plt.savefig('g2s.svg')
plt.title('count rate = ' + str(np.round(
    1e3 * ((γs_det2 + γs_det1) / t_clk), 2)) + ' Mcps')
plt.plot(x3 + t_excite, 0.8*y3)
plt.tight_layout()

plt.show()
prd_plots.PPT_save_2d(fig1, ax1, p0 + '-g2.png')
prd_plots.PPT_save_2d(fig2, ax2, p0 + '-hist.png')
# prd_plots.PPT_save_2d(fig1, ax1, p0 + '-g2 log.png')
# prd_plots.PPT_save_2d(fig2, ax2, p0 + '-hist log.png')
