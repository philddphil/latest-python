##############################################################################
# Import some libraries
##############################################################################
import sys
import numpy as np
import matplotlib.pyplot as plt

##############################################################################
# Import some extra special libraries from my own repo and do some other stuff
##############################################################################
sys.path.insert(0, r"C:\local files\Python\Local Repo\library")
import prd_data_proc
import prd_plots
np.set_printoptions(suppress=True)
cs = prd_plots.palette()

##############################################################################
# Do some stuff
##############################################################################
# load photon timing files generated by 'Generate photons.py'
T = 10
γs = 1e6
p0 = r'C:\local files\Experimental Data\G5 A5 Python simulations'\
    r'\Single photon statistics\old'

f0 = p0 + r'\1e' + str(int(np.log10(γs))) + ' Photons, ' + \
    'T = ' + str(int(T * 100)) + ' taus abs.txt'
f1 = p0 + r'\1e' + str(int(np.log10(γs))) + ' Photons, ' + \
    'T = ' + str(int(T * 100)) + ' taus rel.txt'
f2 = p0 + r'\1e' + str(int(np.log10(γs))) + ' Photons, ' + \
    'T = ' + str(int(T * 100)) + ' taus 1.txt'
f3 = p0 + r'\1e' + str(int(np.log10(γs))) + ' Photons, ' + \
    'T = ' + str(int(T * 100)) + ' taus 2.txt'
f4 = p0 + r'\1e' + str(int(np.log10(γs))) + ' Photons, ' + \
    'T = ' + str(int(T * 100)) + ' taus HBT.txt'
f5 = p0 + r'\1e' + str(int(np.log10(γs))) + ' Photons, ' + \
    'T = ' + str(int(T * 100)) + ' fom.txt'

τs_abs = np.loadtxt(f0)
τs_rel = np.loadtxt(f1)
τs_1 = np.loadtxt(f2)
τs_2 = np.loadtxt(f3)
τs_HBT = np.loadtxt(f4)
fom = np.loadtxt(f5)
τ = fom[0]
Δt = fom[1]
γs = fom[2]
print(len(τs_HBT))

# trim longer array to length of shorter
n = min(len(τs_1), len(τs_2))
τs_1 = τs_1[0:n]
τs_2 = τs_2[0:n]
g = np.correlate(τs_1, τs_2, 'same')
print(np.shape(τs_abs))
print(n)
alt_t1 = []
alt_t2 = []
for i0, v0 in enumerate(τs_abs[0:10000]):
    if np.random.random() < 0.5:
        alt_t1.append(v0)
    else:
        alt_t2.append(v0)

print(alt_t1[0:9])
print(alt_t2[0:9])
alt_τ = np.linspace(-1000, 1000, 2001)
t1_bar = len(alt_t1) / np.max(alt_t1)
t2_bar = len(alt_t2) / np.max(alt_t2)
g2 = []
# for i0, v0 in alt_τ:
#     g2.append()
# g = np.correlate(alt_t1, alt_t2,'same')
#######################################################################
# Plot some figures
#######################################################################
prd_plots.ggplot()

# histograms
# x0 = τs_1 - τs_2
# x0 = [i for i in (τs_1 - τs_2) if i <= 1000]
# x0 = [i for i in x0 if i >= -1000]

x1 = τs_HBT
x1 = [i for i in x1 if i <= 1000]
x1 = [i for i in x1 if i >= -1000]

x2 = τs_rel
x2 = [i for i in x2 if i <= 200]
print('samples = ', len(x2))
bin_N = 200
hist, bins = np.histogram(x1, bins=bin_N)
hist_time = np.linspace(bins[0] + (bins[1] - bins[0]) / 2,
                        bins[-2] + (bins[-1] - bins[-2]) / 2, 1000)

fig1 = plt.figure('fig1', figsize=(3 * np.sqrt(2), 3))
ax1 = fig1.add_subplot(1, 1, 1)
fig1.patch.set_facecolor(cs['mnk_dgrey'])
ax1.set_xlabel('')
ax1.set_ylabel('')
plt.plot(τs_1)
plt.plot(τs_2)
plt.tight_layout()
plt.show()

fig2 = plt.figure('fig2', figsize=(3 * np.sqrt(2), 3))
ax2 = fig2.add_subplot(1, 1, 1)
fig2.patch.set_facecolor(cs['mnk_dgrey'])
ax2.set_xlabel('Time')
ax2.set_ylabel('#')
# ax2.set_yscale('log')
plt.hist(x1, bins=bin_N, alpha=0.5,
         facecolor=cs['ggred'], edgecolor=cs['mnk_dgrey'],
         label='Probabilistic')
# plt.hist(x2, bins=bin_N, alpha=0.5,
#          facecolor=cs['ggred'], edgecolor=cs['mnk_dgrey'],
# label='Probabilistic')
# ax2.plot(hist_time, hist[0] * np.exp(-(hist_time / τ)), label='Analytic')
ax2.legend(loc='upper right', fancybox=True, framealpha=0.5)
plt.savefig('logplot.svg')
plt.title('τs_HBT')
plt.tight_layout()
# plt.xlim(0, 1000)
plt.show()
